import data.set 
import data.set.basic
import set_theory.zfc 
-- import data.nat.basic
-- import set_theory.cardinal

-- open Set 

open set 
--open cardinal

universes u v
variables {Œ± Œ≤ : Type u}
variables {a b c: Type u}
variables {A C: set Œ±}
variable B: set Œ≤

#check prod Œ± Œ≤
#reduce prod A B
#check Œ±
#check (set Œ±)

#eval 1 + 2
--#check set({a b})
#check (a,b)
#reduce (a, b).1
#reduce (a, b).2
#check [1, 2] -- list ‚Ñï 
#check [a,b] -- List (Type u)
--instance i: (x: nat) (y: nat) := ‚ü®1, 2‚ü©
def v : set nat := {1,2}
#check v 

def v2 : set nat := {2, 3}

def v3: set (‚Ñï √ó ‚Ñï)  := {(1,2), (2,4)}
def v4: set(‚Ñï √ó ‚Ñï) := {(1,2),(3,4)}

def powerset' (A : set Œ±) : set (set Œ±) := {B : set Œ± | B ‚äÜ A}

#reduce ‚àÉ‚¶Éx:v3‚¶Ñ, x.val.1 = 1 ‚àß x.val.2 = 4
#print v3
#reduce (1,2) ‚àà v3
#print powerset
#reduce powerset A
#reduce v √ó v2
-- #reduce (1,2) ‚àà set(v √ó v2)
#reduce 1 ‚àà v2
#reduce 2 ‚àà v
#reduce 1 ‚àà v
#reduce A √ó B
#reduce powerset A √ó B  -- this is parsed with: powerset (A) √ó B
#reduce powerset v2 √ó v2 -- parswed with: powerset (v2) √ó v2
#reduce powerset' {v2 √ó v2} --set(v2 √ó v2)
#check v2 √ó v2
#print √ó
#print prod 
#check prod v2 v2
#check set (prod v2 v2)
#reduce (2,2) ‚àà  {v2 √ó v2} 
--#check (2,2) ‚àà set (v2 √ó v2)
#check A √ó B 
#check set (A √ó B)
#check powerset {A √ó B}
#check powerset A
#reduce powerset A 
#reduce powerset {A √ó B}
#check powerset {A √ó B}
#check (1,2) ‚àà powerset {A √ó B}
#check powerset {v2 √ó v2} 
#check (2,2) ‚àà powerset {v2 √ó v2}
#reduce (2,2) ‚àà powerset {v2 √ó v2}
#check set (powerset {v2 √ó v2})
#check ‚Ñï √ó ‚Ñï 
#check set (‚Ñï √ó ‚Ñï)
-- are these same?
def p : ‚Ñï √ó ‚Ñ§ := ‚ü® 1, 2 ‚ü© 
def p2 : ‚Ñï √ó ‚Ñ§ := (1, 2)
#check p
#check p2

#check Œ† x : Œ±, Œ≤
#check Œª x: Œ±, Œ≤

-- these are same
#check fun x: nat, x + 5
#check Œª x: nat, x+ 5

#print ‚à£ 
def evens : set ‚Ñï := {n | even n}
#check nat √ó nat
#check evens
variable n':nat
def n‚ÇÇ : ‚Ñï := 10
#check even n‚ÇÇ 
#reduce even n‚ÇÇ 

--variable e:nat 
variable s': set ‚Ñï
#check 1 ‚àà s'
-- caution!! `‚à£`(\mid) and `|` is different!! we can not use \mid in 
-- set comprehension.
def test_false : set ‚Ñï := {e | even e }
#check test_false
variables {A' B': set ‚Ñï}
#check A' √ó B'
#check powerset {A' √ó B'}
#check {(a,b)} ‚àà powerset {A √ó B}
#print A 
#print powerset
-- This does not raises error but `set (set Type u)` does not seem what we want
def test_function_from_set : set (set(Type u)) := {f | f ‚äÜ {A √ó B}}
--def test_function_from_set : set (set(A √ó B)) := 
-- {sf | sf ‚àà powerset (A.prod B)}
def test_function_from_set2 {X' X'': set ‚Ñï}: set (set(‚Ñï √ó ‚Ñï)) :=
 {sf | sf ‚àà powerset (X'.prod X'')}

namespace test
variables X Y: set ‚Ñï 
#check X √ó Y
variables x: ‚Ñï  √ó ‚Ñï 
#check x
-- !caution! `prod X Y` and `set.prod X Y` are different!! 
#check prod X Y -- ‚Ü•X √ó ‚Ü•Y : Type
#check set.prod X Y -- set (‚Ñï √ó ‚Ñï) : Type ;; is equivalent to `X.prod Y`
#check set (prod X Y)
#print set.prod -- {p : Œ± √ó Œ≤ | p.fst ‚àà s ‚àß p.snd ‚àà t}
#print prod
#print √ó -- prod 

def t {X Y: set ‚Ñï}: set(‚Ñï √ó ‚Ñï) := X.prod Y 
def t' : set(‚Ñï √ó ‚Ñï) := X.prod Y 

#check t -- t : set (‚Ñï √ó ‚Ñï)
#check t' -- t' : set ‚Ñï ‚Üí set ‚Ñï ‚Üí set (‚Ñï √ó ‚Ñï)
#check t' 3 5 -- t' 3 5 : set (‚Ñï √ó ‚Ñï)  ; t' requires two parameters!
#check x ‚àà t

variable f‚ÇÇ: ‚Ñï ‚Üí ‚Ñï  
#check f‚ÇÇ

variable f‚ÇÉ: Œ± ‚Üí Œ≤
#check f‚ÇÉ
#check ‚Ñï 

namespace function
def graph {Œ± Œ≤: Type u} (f: Œ± ‚Üí Œ≤) : set (Œ± √ó Œ≤) := {p | p.2 = f p.1}
end function
#check function.graph(f‚ÇÉ)

def test_function_from_set2 {X' X'': set ‚Ñï}: set (set(‚Ñï √ó ‚Ñï)) :=
 {sf | sf ‚àà powerset (X'.prod X'')}

variables {D E: set (Type u)}
#check {p | p ‚àà ùí´(D.prod E)}
-- not yet defined

def setA {a: Œ±} : set Œ±:= {a | a ‚àà A} 
def setA2 {A2: set Œ±}: set Œ± := {a | a ‚àà A2}
def setN {N: set ‚Ñï}: set ‚Ñï := {n | n ‚àà N}
variable Œ∏: Type
def setC {C2: set Œ∏} :set Œ∏ := {c | c ‚àà C2}

-- Type*, Type u, Type _ is used for dependant type
variable Œ≥ : Type* -- to avoid arbitaly universe name we can use `Type*`
#check Œ± -- Type u
#check Œ≥ -- Type u_1
#check setN -- set ‚Ñï 
#check setA -- set ?M_1 (this can not have set `Œ±` because `Œ±` is `Type u`)
#check setA2 -- set ?M_1
#check setC -- set Œ∏ (this have type `set Œ∏` is because `Œ∏` is `Type`)
#check ‚Ñï -- Type
#print ‚Ñï -- `‚Ñï`:1024 := nat
#check A -- set Œ±
#check {l | l ‚àà setA} -- set ?M_1
#check {l2 | l2 ‚àà A} -- set Œ±
-- We can not remove the hint `{setA: set Œ±}` from `setA_from_setA` definition.
-- Is this because `def` has its own scope that `setA` is missing the type info?
def setA_from_setA {setA: set Œ±}: set Œ± := {x | x ‚àà setA}
-- Why OK? because the scope inside the {} is global?
#check {l: Œ± | l ‚àà setA}
end test
--#reduce {f:nat √ó nat ‚à£ f ‚àà powerset {v2 √ó v2}}don't know how to synthesize placeholder
-- #check {n sf ‚à£ n ‚àà ‚Ñï}
--#reduce {f ‚à£ f ‚àà powerset {v2 √ó v2}}
-- v = {1,2}, v2 = {2,3}
-- v √ó v2 = {(1,2),(1,3),(2,2),(2,3)}
-- powerset v √ó v2 = {‚àÖ,
--                    {(1,2)}, {(1,2),(1,3)},{(1,2),(2,2)},{(1,2),(2,3)},{}
--                    {(1,3),(2,2)}, {(1,3),(2,3)},
--                    {(2,2),(2,3)},
--                    {(1,2),(1,3),(2,2)},{(1,2),(2,2),(2,3)},
--                    {(1,3),(2,2),(2,3)},
--                    {(1,2),(1,3),(2,2),(2,3)}}

namespace test2
#check a
#check Œ±
#check 'a'
-- We can not define the following
-- def onetwo : Œ±√óŒ≤ := ‚ü®Œ±, Œ≤‚ü©   
def ab : char √ó char := ‚ü® 'a', 'b'‚ü© 
#print char
#print nat 
#print Œ± 
#check (1,2) 
def sf‚ÇÅ : set (set (‚Ñï √ó ‚Ñï)) := {{(1,2)},{(1,2),(1,3)}}
-- def sf‚ÇÇ : set (set (Œ± √ó Œ≤)) := {{‚ü®a,b‚ü© },{(a,b)}}
#check sf‚ÇÅ

def npair : ‚Ñï √ó ‚Ñï := (1,2)
#check npair -- npair : ‚Ñï √ó ‚Ñï

def npair‚ÇÇ : ‚Ñï √ó ‚Ñï := ‚ü®1,2‚ü©  -- whats the difference on `()` and `‚ü® ‚ü©`?
#check npair‚ÇÇ -- npair‚ÇÇ : ‚Ñï √ó ‚Ñï 

def nset‚ÇÅ : set ‚Ñï := {1,2}
def nset‚ÇÇ : set ‚Ñï := {1,2}

-- we can not call this. why?
--#check nset‚ÇÅ.prod nset‚ÇÇ
#check nset‚ÇÅ -- set: ‚Ñï 
-- we can not infer the type of {1,2}
--def setnpair : set (‚Ñï √ó ‚Ñï) := {1,2}.prod {2,3}
-- the type is `set (‚Ñï √ó ‚Ñï)` (not `(set ‚Ñï) √ó (set ‚Ñï)`) 
def npairset : set (‚Ñï √ó ‚Ñï) := ({1,2}:set ‚Ñï).prod ({2,3}:set ‚Ñï)  
#check npairset -- set (‚Ñï √ó ‚Ñï)
#reduce npairset

def npairset‚ÇÇ : set (‚Ñï √ó ‚Ñï) := {(1,2),(3,4),(5,6)}

#check npairset‚ÇÇ -- npaierset‚ÇÇ : set (‚Ñï √ó ‚Ñï )
#reduce npairset‚ÇÇ -- Œª (b : ‚Ñï √ó ‚Ñï), b = (1, 2) ‚à® b = (3, 4) ‚à® b = (5, 6)

def setnpair : set ‚Ñï √ó set ‚Ñï := ‚ü® {1,2,3} , {2,3,4,5} ‚ü© 
#check setnpair -- set ‚Ñï √ó set ‚Ñï 
#check A -- set Œ±
#check A.prod B -- set (Œ± √ó Œ≤)

-- When the type is ‚Ñï
variables {n‚ÇÅ n‚ÇÇ : ‚Ñï}
variable {N‚ÇÅ: set ‚Ñï}
variable {N‚ÇÇ: set ‚Ñï}
#check N‚ÇÅ.prod N‚ÇÇ -- set (‚Ñï √ó ‚Ñï) 
#check (1,2) ‚àà N‚ÇÅ.prod N‚ÇÇ --(X.prod Y)
#check (n‚ÇÅ,n‚ÇÇ) ‚àà N‚ÇÅ.prod N‚ÇÇ

#print ‚Ñï
#print nat

-- When it is generic Type
variables {x‚ÇÅ y‚ÇÅ: Type}
variables {X‚ÇÅ: set Type}
variables {Y‚ÇÅ: set Type}
#check X‚ÇÅ.prod Y‚ÇÅ -- X‚ÇÅ.prod Y‚ÇÅ : set (Type √ó Type)
#check (x‚ÇÅ,y‚ÇÅ) ‚àà X‚ÇÅ.prod Y‚ÇÅ

variable f‚ÇÅ : set (Type √ó Type)
#check f‚ÇÅ -- f‚ÇÅ : set (Type √ó Type)
#check set(X‚ÇÅ √ó Y‚ÇÅ)  -- set (‚Ü•X‚ÇÅ √ó ‚Ü•Y‚ÇÅ) : Type 1
#check ‚Ü•X‚ÇÅ
#reduce ‚Ü•X‚ÇÅ -- {x // X‚ÇÅ x}
#check ‚Ü•X‚ÇÅ √ó ‚Ü•Y‚ÇÅ -- ‚Ü•X‚ÇÅ √ó ‚Ü•Y‚ÇÅ : Type 1
#reduce coe_sort X‚ÇÅ
#check X‚ÇÅ.prod Y‚ÇÅ -- X‚ÇÅ.prod Y‚ÇÅ : set (Type √ó Type)
#check (x‚ÇÅ,y‚ÇÅ) -- (x‚ÇÅ, y‚ÇÅ) : Type √ó Type
#check (x‚ÇÅ,y‚ÇÅ) ‚àà f‚ÇÅ -- (x‚ÇÅ, y‚ÇÅ) ‚àà f‚ÇÅ : Prop
#check coe_sort X‚ÇÅ √ó coe_sort Y‚ÇÅ -- ‚Ü•X‚ÇÅ √ó ‚Ü•Y‚ÇÅ : Type 1
#check coe_sort X‚ÇÅ
--#check (x‚ÇÅ, y‚ÇÅ) ‚àà (X‚ÇÅ √ó Y‚ÇÅ)
#check ‚ÜëX‚ÇÅ --‚ÜëX‚ÇÅ : ?M_1
#check subtype X‚ÇÅ -- subtype X‚ÇÅ : Type 1

variable s : set Œ±
#check subtype s 

/-- invalid definition -/
-- Pitfalls
-- ========
-- 1. f is not `set (X √ó Y)` because `X` is `set Type*`, it means it is a term
---   not a type, so `X √ó Y` does not work as expected.
-- 2. `x:X` is expected to express `x ‚àà X`, but again
--    `X` is not an expected type. (it is coerced type ‚Ü•X in reality)  
--    Thus `x:X` does not mean `x` is a member of the set `X`.
--    It does not mean `x` is a type of `Type*`. Instead,
--    it means `x` has a type of `‚Ü•X`, then `(x, y)` has a type `(‚Ü•X, ‚Ü•Y)`.
def is_function_invalid (X Y: set Type*) (f: set (X √ó Y)): Prop := 
 ‚àÄx:X,‚àÉ!y:Y, (x,y) ‚àà f

/-- invalid definition -/
def funs_invalid {X Y: set Type*} : set (set (X √ó Y)) :=
{f | f ‚àà ùí´ (X.prod Y) ‚àß (is_function_invalid X Y f)}

/--
The function x is a triple: (T, T, (T, T)) (T can be any type)   
-/
def is_function (X:set Œ±) (Y: set Œ≤) (f: set (Œ± √ó Œ≤)): Prop := 
 ‚àÄx ‚àà X,‚àÉ!y ‚àà Y, (x,y) ‚àà f

-- not yet defined
-- `funs X Y` is `Y ^ X`
def funs (X : set Œ±) (Y: set Œ≤): set (set (Œ± √ó Œ≤)) :=
{f | f ‚àà ùí´ (X.prod Y) ‚àß (is_function X Y f)}

theorem mem_funs_eq_isfunction {X: set Œ±} {Y: set Œ≤ } {f: set (Œ± √ó Œ≤)}: 
f ‚àà funs X Y ‚Üî is_function X Y f :=
by simp [funs, is_function]



--variable a_number‚ÇÇ : 
--def setN: set ‚Ñï := {n | n: ‚Ñï}
def example2 {n: ‚Ñï} : Prop := n = 1
--lemma example3: ‚àÄn:‚Ñï, n = 1 := sorry
#print set

-- universes u v
-- this definition is from library/init/data/set.lean
def set‚ÇÅ (Œ± : Type u) := Œ± ‚Üí Prop


end test2

namespace ZFCSet

-- These definitions are copied from set_theorey/zfc.lean

/-- The type of pre-sets in universe `u`. A pre-set
  is a family of pre-sets indexed by a type in `Type u`.
  The ZFC universe is defined as a quotient of this
  to ensure extensionality. -/
inductive pSet : Type (u+1)
| mk (Œ± : Type u) (A : Œ± ‚Üí pSet) : pSet

#check pSet

/-- The ZFC universe of sets consists of the type of pre-sets,
  quotiented by extensional equivalence. -/
def Set : Type (u+1) := quotient pSet.setoid.{u}

#check Set
#reduce Set.{u}
#check Set.{v}
#print pSet.setoid

--variable (x : Set.{u})

notation `‚ãÉ` := Set.Union

/-- Kuratowski ordered pair -/
def pair (x y : Set.{u}) : Set.{u} := {{x}, {x, y}}

/-- A subset of pairs `{(a, b) ‚àà x √ó y | p a b}` -/
def pair_sep (p : Set.{u} ‚Üí Set.{u} ‚Üí Prop) (x y : Set.{u}) : Set.{u} :=
{z ‚àà powerset (powerset (x ‚à™ y)) | ‚àÉa ‚àà x, ‚àÉb ‚àà y, z = pair a b ‚àß p a b}

/-- The cartesian product, `{(a, b) | a ‚àà x, b ‚àà y}` -/
def prod : Set.{u} ‚Üí Set.{u} ‚Üí Set.{u} := pair_sep (Œªa b, true)

/-- `is_func x y f` is the assertion `f : x ‚Üí y` where `f` is a ZFC function
  (a set of ordered pairs) -/
def is_func (x y f : Set.{u}) : Prop :=
f ‚äÜ prod x y ‚àß ‚àÄz:Set.{u}, z ‚àà x ‚Üí ‚àÉ! w, pair z w ‚àà f

/-- `funs x y` is `y ^ x`, the set of all set functions `x ‚Üí y` -/
def funs (x y : Set.{u}) : Set.{u} :=
{f ‚àà powerset (prod x y) | is_func x y f}

end ZFCSet